# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
concurrency:
    group: some-group-name
jobs:

  job1:
    name: build

    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [10]
        os: [ubuntu-latest, windows-latest]

    defaults:
      run:
        working-directory: ./example-app

    steps:
      - uses: actions/checkout@v3
      - name: Install Poetry Action
        uses: snok/install-poetry@v1.3.3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
         path: /home/runner/work/<path>/example-app/.venv
         key: ${{ runner.os }}-venv

  job2:
    name: lint
    needs: job1
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./example-app

    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
           pip install flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
         path: /home/runner/work/<path>/example-app/.venv
         key: ${{ runner.os }}-venv
  job3:
    name: formatter
    needs: job1
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./example-app

    steps:
    - name: Python Code Quality Action
      uses: WillCodeForCats/python-lint-action@v1.0.0
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/<path>/example-app/.venv
        key: ${{ runner.os }}-venv
  job4:
    name: security
    needs: job1
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./example-app

    steps:
    - name: Bandit Check
      uses: jpetrucciani/bandit-check@1.7.4
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/<path>/example-app/.venv
        key: ${{ runner.os }}-venv

  job5:
    if: ${{ always() }}
    needs: [job1,job2,job3,job4]
    name: unittests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./example-app

    steps:
        - uses: actions/checkout@v3
        - name: Install dependencies
          run: |
           pip install flake8 pytest
        - name: Test with pytest
          run: |
            pytest
        - name: Cache build venv
          id: cached-poetry-dependencies
          uses: actions/cache@v3
          with:
           path: /home/runner/work/<path>/example-app/.venv
           key: ${{ runner.os }}-venv
           
       
